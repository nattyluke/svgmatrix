export function fromArray(array: number[]): CSSMatrix;
export function fromMatrix(m: CSSMatrix | DOMMatrix | CSSMatrix.JSONMatrix): CSSMatrix;
export function fromString(source: string): CSSMatrix;
export function Translate(x: number, y: number, z: number): CSSMatrix;
export function Rotate(rx: number, ry: number, rz: number): CSSMatrix;
export function RotateAxisAngle(x: number, y: number, z: number, alpha: number): CSSMatrix;
export function Scale(x: number, y: number, z: number): CSSMatrix;
export function SkewX(angle: number): CSSMatrix;
export function SkewY(angle: number): CSSMatrix;
export function Multiply(m1: CSSMatrix, m2: CSSMatrix): CSSMatrix;
export default CSSMatrix;
declare class CSSMatrix {
    constructor(...args: any);
    a: number;
    b: number;
    c: number;
    d: number;
    e: number;
    f: number;
    m11: number;
    m12: number;
    m13: number;
    m14: number;
    m21: number;
    m22: number;
    m23: number;
    m24: number;
    m31: number;
    m32: number;
    m33: number;
    m34: number;
    m41: number;
    m42: number;
    m43: number;
    m44: number;
    set isIdentity(arg: boolean);
    get isIdentity(): boolean;
    set is2D(arg: boolean);
    get is2D(): boolean;
    setMatrixValue(source: string | number[] | CSSMatrix | DOMMatrix): CSSMatrix;
    toString(): string;
    toArray(): number[];
    toJSON(): CSSMatrix.JSONMatrix;
    multiply(m2: CSSMatrix | DOMMatrix | CSSMatrix.JSONMatrix): CSSMatrix;
    translate(x: number, y: number | null, z: number | null): CSSMatrix;
    scale(x: number, y: number | null, z: number | null): CSSMatrix;
    rotate(rx: number, ry: number | null, rz: number | null): CSSMatrix;
    rotateAxisAngle(x: number, y: number, z: number, angle: number): CSSMatrix;
    skewX(angle: number): CSSMatrix;
    skewY(angle: number): CSSMatrix;
    transformPoint(v: CSSMatrix.PointTuple | DOMPoint): CSSMatrix.PointTuple;
    transform(t: CSSMatrix.PointTuple): CSSMatrix.PointTuple;
}
